{"version":3,"sources":["store.js","constants.js","components/TodoInput/TodoInput.jsx","components/TodoItem/TodoItem.jsx","components/TodoList/TodoList.jsx","components/Footer/Footer.jsx","components/TodoForm/TodoForm.jsx","actions/ActionCreator.jsx","App.js","reducers/tasks.jsx","reducers/filters.jsx","reducers/index.jsx","index.js"],"names":["preloadedState","ADD_TASK","REMOVE_TASK","COMPLETE_TASK","CHANGE_FILTER","EDIT_TASK","ESCAPE_EDIT_TASK","TodoInput","value","onChange","className","TodoItem","state","inputText","handleInputChange","event","setState","target","this","props","text","removeTask","id","completeTask","isCompleted","isChanged","editTask","escapeEditTask","checked","onClick","type","onDoubleClick","style","textDecoration","onSubmit","Component","TodoList","tasksList","map","FILTERS_BTN","Footer","amount","activeFilter","changeFilter","TodoForm","taskText","addTask","preventDefault","Date","getTime","filterTasks","tasks","filter","task","getActiveTasksCounter","length","filters","isTasksExit","filteredTasks","taskCounter","color","size","connect","App","TASKS","load","namespace","action","console","log","AllReducers","combineReducers","composeEnhancers","compose","store","createStore","applyMiddleware","save","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3b340393.chunk.js","sourcesContent":["import {createStore, applyMiddleware, compose} from 'redux';\r\nimport AllReducers from './reducers/index';\r\nimport {save} from 'redux-localstorage-simple';\r\n\r\nconst composeEnhancers =\r\n  process.env.NODE_ENV !== 'production' &&\r\n  typeof window === 'object' &&\r\n  window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?\r\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({}) : compose;\r\n    \r\nconst configureStore = preloadedState => (\r\n    createStore(\r\n        AllReducers,\r\n        preloadedState,\r\n        composeEnhancers(\r\n            applyMiddleware(save({namespace:'todo-list'}))\r\n        ),\r\n      )\r\n    );\r\n \r\nconst store = configureStore({});\r\n\r\nexport default store;","export const ADD_TASK = 'ADD_TASK';\r\nexport const REMOVE_TASK = 'REMOVE_TASK';\r\nexport const COMPLETE_TASK = 'COMPLETE_TASK';\r\nexport const CHANGE_FILTER ='CHANGE_FILTER';\r\nexport const EDIT_TASK = 'EDIT_TASK';\r\nexport const ESCAPE_EDIT_TASK = 'ESCAPE_EDIT_TASK';","import React from 'react';\r\nimport './TodoInput.css';\r\n\r\nconst TodoInput = ({value, onChange}) => {\r\n    return (\r\n        <>\r\n            <input\r\n                className=\"task__input\"\r\n                onChange={onChange}\r\n                value={value}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TodoInput;","import React, { Component } from 'react';\r\nimport {MdClose} from \"react-icons/md\";\r\nimport {MdDone} from \"react-icons/md\";\r\nimport {MdRedo} from \"react-icons/md\";\r\nimport './TodoItem.css';\r\n\r\nclass TodoItem extends Component {\r\n    state = {\r\n        inputText: ''\r\n    }\r\n\r\n    handleInputChange = (event) => {\r\n        this.setState({\r\n            inputText: event.target.value\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const {text, removeTask, id, completeTask, isCompleted, isChanged, editTask, escapeEditTask} = this.props;\r\n        const {inputText} = this.state;\r\n        return (\r\n            <li>\r\n                {!isChanged && \r\n                    <li>\r\n                        <div className=\"li__content\">\r\n                            <label className=\"checkbox__label\">\r\n                                <input className=\"checkbox\" checked={isCompleted?'checked':''} onClick={()=> completeTask(id)} type='checkbox'/>\r\n                                <span className=\"checkbox__fake\"></span>\r\n                            </label>            \r\n                            <span className=\"task\" onDoubleClick={() => editTask(id, text)} style ={isCompleted?{textDecoration: 'line-through'}: {textDecoration: 'none'} }>{text}</span>\r\n                            <MdClose className=\"delete-btn\" onClick={()=>removeTask(id)}/>\r\n                        </div>                       \r\n                    </li>}\r\n                {isChanged &&\r\n                    <li className=\"change_li\">\r\n                        <form onSubmit={() => editTask(id, inputText)}>\r\n                        <input className=\"change__input\" onChange={this.handleInputChange}/>\r\n                        <MdDone className=\"confirm-edit-btn\" onClick={() => editTask(id, inputText)}/>\r\n                        <MdRedo className=\"escape-edit-btn\" onClick={() => escapeEditTask(id)}/>\r\n                        </form>        \r\n                    </li>}\r\n            </li>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoItem;","import React from 'react'\r\nimport TodoItem from '../TodoItem/TodoItem';\r\nimport './TodoList.css';\r\n\r\nconst TodoList = ({tasksList, removeTask, completeTask, editTask, escapeEditTask}) => {\r\n    return (\r\n            <div className=\"wrapper\">\r\n                <ul className=\"todo__list\">\r\n                {tasksList.map(({id, text, isCompleted, isChanged})=>(\r\n                    <TodoItem escapeEditTask={escapeEditTask} editTask={editTask} completeTask={completeTask} removeTask={removeTask} id={id} key={id} text={text} isCompleted={isCompleted} isChanged={isChanged}/>\r\n                ))}\r\n                </ul>\r\n            </div>            \r\n    )\r\n}\r\n\r\n\r\nexport default TodoList;","import React from 'react';\r\nimport './Footer.css'\r\n\r\nconst FILTERS_BTN = [\r\n    {\r\n        text: 'All',\r\n        id: 'all'\r\n    },\r\n    {\r\n        text: 'Active',\r\n        id: 'active'\r\n    },\r\n    {\r\n        text: 'Completed',\r\n        id: 'completed'\r\n    }\r\n]\r\n\r\nconst Footer = ({amount, activeFilter, changeFilter}) => {\r\n    return (\r\n        <div>\r\n            {/* <span className=\"counter\">{`${amount} Tasks left`}</span> */}\r\n            <div className=\"buttons__container\">{FILTERS_BTN.map(({text, id}) => <button className=\"submit_button\" key = {id} onClick={() => changeFilter(id)} key={id}>{text}</button>)}</div> \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer;","import React, { Component } from 'react';\r\nimport './TodoForm.css';\r\n\r\nimport {connect} from 'react-redux';\r\nimport {addTask, removeTask, completeTask, changeFilter, editTask, escapeEditTask} from '../../actions/ActionCreator';\r\nimport {MdAddCircle} from 'react-icons/md';\r\nimport TodoInput from '../TodoInput/TodoInput';\r\nimport TodoList from '../TodoList/TodoList';\r\nimport Footer from '../Footer/Footer';\r\n\r\n\r\nclass TodoForm extends Component {\r\n    state = {\r\n        taskText: ''\r\n    }\r\n\r\n    handleInputChange = (event) => {\r\n        this.setState({\r\n            taskText: event.target.value\r\n        })\r\n    }\r\n\r\n    addTask = (event) => {\r\n        event.preventDefault();\r\n        const {taskText} = this.state;        \r\n        const {addTask} = this.props;\r\n        if(taskText !== ''){\r\n            addTask((new Date()).getTime(), taskText, false);\r\n        }          \r\n        this.setState({\r\n            taskText: ''\r\n        }) \r\n    }\r\n\r\n    filterTasks = (tasks, activeFilter) => {\r\n        switch(activeFilter){\r\n            case 'completed':\r\n                return tasks.filter(task => task.isCompleted);\r\n            case 'active':\r\n                return tasks.filter(task => !task.isCompleted);\r\n            default: \r\n                return tasks;\r\n        }\r\n    }\r\n\r\n    getActiveTasksCounter = tasks => tasks.filter(task => !task.isCompleted).length;\r\n\r\n    render() {\r\n        const {taskText} = this.state;\r\n        const {tasks, removeTask, completeTask, changeFilter, editTask, filters, escapeEditTask} = this.props;\r\n        const isTasksExit = tasks && tasks.length > 0;\r\n        const filteredTasks = this.filterTasks(tasks, filters);\r\n        const taskCounter = this.getActiveTasksCounter(tasks);\r\n        return (\r\n            <div className='container'>\r\n                <div className=\"container__inner\">\r\n                <h1 className=\"caption\">WHAT SHOULD I DO?</h1>\r\n                    <div className=\"todo-form\">                        \r\n                        <form onSubmit={this.addTask}>\r\n                        <TodoInput onChange={this.handleInputChange} value={taskText}/> <MdAddCircle className =\"submit__button\" color=\"df2359\" size=\"10%\" onClick={this.addTask}/> \r\n                        </form>\r\n                        {isTasksExit && <TodoList escapeEditTask={escapeEditTask} editTask={editTask} completeTask={completeTask} tasksList={filteredTasks} removeTask={removeTask}/>}\r\n                       \r\n                    </div>    \r\n                    {isTasksExit && <Footer changeFilter={changeFilter} activeFilter={filters} amount={taskCounter}/>}                 \r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(state => ({\r\n    tasks: state.tasks,\r\n    filters: state.filters\r\n}), {addTask, removeTask, completeTask, changeFilter, editTask, escapeEditTask})(TodoForm);","import {ADD_TASK, REMOVE_TASK, COMPLETE_TASK, CHANGE_FILTER, EDIT_TASK, ESCAPE_EDIT_TASK} from '../constants';\r\n\r\nexport const addTask = (id, text, isCompleted) => ({    \r\n        type: ADD_TASK,\r\n        id: id,\r\n        text: text,\r\n        isCompleted: isCompleted    \r\n});\r\n\r\nexport const removeTask = (id) => ({\r\n        type: REMOVE_TASK,\r\n        id: id\r\n});\r\n\r\nexport const completeTask = (id) => ({\r\n        type: COMPLETE_TASK,\r\n        id: id\r\n});\r\n\r\nexport const changeFilter = (activeFilter) => ({\r\n        type: CHANGE_FILTER,\r\n        activeFilter\r\n});\r\n\r\nexport const editTask = (id, text) => ({\r\n        type: EDIT_TASK,\r\n        id: id,\r\n        text: text\r\n});\r\n\r\nexport const escapeEditTask = (id) => ({\r\n        type: ESCAPE_EDIT_TASK,\r\n        id: id\r\n});","import React from 'react';\nimport TodoForm from './components/TodoForm/TodoForm';\n\nconst App = () => {\n  return (\n    <>\n      <TodoForm/>\n    </>\n  )\n}\n\nexport default App;","import {ADD_TASK, REMOVE_TASK, COMPLETE_TASK, EDIT_TASK, ESCAPE_EDIT_TASK} from '../constants';\r\nimport {load} from 'redux-localstorage-simple';\r\n\r\nlet TASKS = load({namespace:'todo-list'}) || [];\r\n\r\nconst tasks = (state = TASKS.tasks, action) => {\r\n    switch(action.type){\r\n        case ADD_TASK:\r\n            return[\r\n                ...state,\r\n                {\r\n                    id: action.id,\r\n                    text: action.text,\r\n                    isCompleted: action.isCompleted\r\n                }\r\n            ];\r\n        case REMOVE_TASK:\r\n            return [...state].filter(task => task.id !== action.id);\r\n        case COMPLETE_TASK:\r\n            return [...state].map(task => {\r\n                if(task.id === action.id){\r\n                    task.isCompleted = !task.isCompleted;\r\n                }\r\n                return task;\r\n            });\r\n        case EDIT_TASK:\r\n            return [...state].map(task => {\r\n                if(task.id === action.id && action.text !== ''){\r\n                    task.isChanged = !task.isChanged;\r\n                    task.text = action.text;\r\n                }\r\n                return task;\r\n            });\r\n        case ESCAPE_EDIT_TASK:\r\n            console.log(state)\r\n            return [...state].map(task => {\r\n                if(task.id === action.id){\r\n                    task.isChanged = !task.isChanged;\r\n                }\r\n                console.log(state)\r\n                return task;\r\n            });\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default tasks;","import {CHANGE_FILTER} from '../constants';\r\n\r\nconst BASE_FILTER = 'all';\r\n\r\nconst filter = (state = BASE_FILTER, action) => {\r\n    switch(action.type){\r\n        case CHANGE_FILTER:\r\n            return action.activeFilter;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default filter;","import {combineReducers} from 'redux';\r\nimport tasks from './tasks';\r\nimport filters from './filters';\r\n\r\nconst AllReducers = combineReducers({tasks, filters});\r\n\r\nexport default AllReducers;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {Provider} from 'react-redux';\nimport store from './store';\n\nReactDOM.render(\n<Provider store={store}>\n  <App />\n</Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}